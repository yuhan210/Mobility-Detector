To run stitch-traces, you need to feed in one template each for a static, walking, running, biking and driving trace. 
Each of these traces should have data from ALL the sensors. So, you should cat the individual sensor traces for each activity into a file before running stitch-traces.

This is what should be done :

0. Train classifier on equal amounts of static, walking, running, biking and driving. Figure out manually how to get these equal amounts in the first place. To run train-classifier, use :

python train-classifier.py accel.out wifi.out gps.out gsm.out geo_loc.out  1> /dev/null 2> classifier.model

1. Create template traces for each activity
=============================================

cat ~/cita/CLEAN_DATA/Tiffany/static/2012-07-16-23-10-22_static/* > Tiffany-static.out
cat ~/cita/CLEAN_DATA/Tiffany/walking/2012-07-17-21-38-59_walking/* > Tiffany-walking.out
cat ~/cita/CLEAN_DATA/Chern/running/2012-10-05-19-05-13_running/* > Chern-running.out
cat ~/cita/CLEAN_DATA/Tiffany/biking/2012-09-14-18-23-22_biking/* > Tiffany-biking.out
cat ~/cita/CLEAN_DATA/Tiffany/driving/2012-07-20-10-25-08_driving/* > Tiffany-driving.out

2. Feed templates into stitch-trace.py
============================================

python stitch-traces.py 1000000 Tiffany-static.out Tiffany-walking.out Chern-running.out Tiffany-biking.out Tiffany-driving.out 382

3. Feed stitched trace output (which is written to disk as a separate file for each sensor) into eval-classifier.py
=================================================================================================================

python eval-classifier.py stitched-Accel.out stitched-Wifi.out stitched-GPS.out stitched-GSM.out stitched-Geo\ Loc.out power.py classifier.model 1> /dev/null


Note about timestamps :
================================================
	1. sampling rates are now in samples per millisecond.
	2. Energy is in Joules per millisecond, to make sure everything is in milliseconds (which can be treated as an integer).
