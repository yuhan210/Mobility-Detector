package edu.mit.LifeLog;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import android.content.Context;
import android.hardware.SensorManager;
import android.text.InputType;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;
import android.widget.ToggleButton;

import edu.mit.LifeLog.Sensor.ScanSelectionType;
import edu.mit.LifeLog.Sensor.SensorType;

public class SensorUI 
{
	private SensorType type;
	private Context context;
	private TextView sensorLabel;
	private ToggleButton toggleButton;
	
	// only one of these is set (or none in the case of photos and sms)
	private EditText scanPeriodText;
	private Spinner spinner;
	
	private TextView scanPeriodUnit;
	private TextView debugStatusText;
	private LifeLogClient client;
	
	// corresponding to SENSOR_DELAY_NORMAL, SENSOR_DELAY_UI, SENSOR_DELAY_GAME, SENSOR_DELAY_FASTEST
	private static final String [] freqChoicesForSensors = { "Low", "Med", "High", "Crazy" };
	//
	
	public SensorUI(SensorType type, Context context, ViewGroup container, ViewGroup.LayoutParams layoutParams,
					LifeLogClient client)
	{		
		this.type = type;
		this.context = context;
		
		UIListener settingsListener = new UIListener();
		
		this.sensorLabel = new TextView(context);
		sensorLabel.setText(type.toString());		
		sensorLabel.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
		sensorLabel.setGravity(Gravity.CENTER);
		sensorLabel.setLayoutParams(layoutParams);

		this.toggleButton = new ToggleButton(context);
		toggleButton.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
		toggleButton.setGravity(Gravity.CENTER);
		toggleButton.setLayoutParams(layoutParams);
		toggleButton.setOnCheckedChangeListener(settingsListener);
		// users cannot turn the sensors off.
		toggleButton.setClickable(false);
		
		container.addView(sensorLabel);
		container.addView(toggleButton);
		
		
		ScanSelectionType selectionType = type.getSelectionType();
		//if (type != SensorType.Accl && type != SensorType.Compass && type != SensorType.Ort)
		if (selectionType == ScanSelectionType.Text)
		{
			this.spinner = null;
			this.scanPeriodText = new EditText(context);
			scanPeriodText.setInputType(InputType.TYPE_CLASS_PHONE);		
			scanPeriodText.setCursorVisible(false);
			scanPeriodText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
			scanPeriodText.setGravity(Gravity.CENTER);
			scanPeriodText.setSingleLine(true);
			scanPeriodText.setEnabled(false);

			scanPeriodText.setLayoutParams(layoutParams);
			scanPeriodText.setWidth(100);
			scanPeriodText.setImeOptions(EditorInfo.IME_ACTION_DONE);
			//scanPeriodText.setOnKeyListener(settingsListener);
			//scanPeriodText.addTextChangedListener(settingsListener);
			scanPeriodText.setOnEditorActionListener(settingsListener);

			container.addView(scanPeriodText);
		}
		else if (selectionType == ScanSelectionType.Spinner)
		{
				
			
			this.scanPeriodText = null;
			this.spinner = new Spinner(context);
			ArrayAdapter<String> adapter = new ArrayAdapter<String>(context, android.R.layout.simple_spinner_item,
					freqChoicesForSensors);
			spinner.setOnItemSelectedListener(settingsListener);
			spinner.setSelection(0);
			spinner.setAdapter(adapter);
			spinner.setClickable(false);
			container.addView(spinner);
			
		
		}
		else if (selectionType == ScanSelectionType.None)
		{
			this.scanPeriodText = null;
			this.spinner = null;
			TextView empty = new TextView(context);
			empty.setText("");
			empty.setLayoutParams(layoutParams);
			container.addView(empty);
		}
		else throw new RuntimeException("unknown scan selection type: " + selectionType);
			
			
		this.scanPeriodUnit = new TextView(context);
		scanPeriodUnit.setText(type.getUnit().toString());
		scanPeriodUnit.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
		scanPeriodUnit.setGravity(Gravity.CENTER_VERTICAL);
		scanPeriodUnit.setLayoutParams(layoutParams);

		container.addView(scanPeriodUnit);

		
	
			this.debugStatusText = new TextView(context);
			debugStatusText.setText("no status");			
			debugStatusText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 7);
			debugStatusText.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
			debugStatusText.setLayoutParams(layoutParams);	
			container.addView(debugStatusText);
		

		
		
		this.client = client;
	}
	
	/** 
	 * change the debug status on the UI
	 * @param newStatus the new status string, with the name of the sensor as the first element
	 */
	public void changeDebugStatus(String newStatus)
	{
		String [] splitted = newStatus.split(Sensor.FieldDelimiter);
		if (!splitted[0].equals(type.toString()) || splitted.length != 2)
			throw new RuntimeException("wrong status format for: " + newStatus);
			debugStatusText.setText(splitted[1]);
	}
	
	/**
	 * change the appearance of the UI elements based on the current settings string
	 * @param setting The setting string (sensor dependent)
	 */
	public void changeUI(String setting)
	{
		String [] splitted = setting.split(Sensor.FieldDelimiter);
		if (!splitted[0].equals(type.toString())) //|| splitted.length != 3)
			throw new RuntimeException("wrong settings format for: " + setting);
		
		boolean enabled = (splitted[1].equals("1"));
		int scanPeriod = (splitted.length > 2) ? Integer.parseInt(splitted[2]) : 0;
		
		ScanSelectionType selectionType = type.getSelectionType();
		if (selectionType == ScanSelectionType.Text)
			scanPeriodText.setText(scanPeriod + "");
		else if (selectionType == ScanSelectionType.Spinner)
		{
			int selectedId = 3;		
			if (scanPeriod == SensorManager.SENSOR_DELAY_NORMAL)
				selectedId = 0;
			else if (scanPeriod == SensorManager.SENSOR_DELAY_UI)
				selectedId = 1;
			else if (scanPeriod == SensorManager.SENSOR_DELAY_GAME)
				selectedId = 2;
			else if (scanPeriod == SensorManager.SENSOR_DELAY_FASTEST)
				selectedId = 3;
			else
				throw new RuntimeException("unknown scan period: " + scanPeriod);
			
			spinner.setSelection(selectedId);
		}
		

		toggleButton.setChecked(enabled);
		sensorLabel.setEnabled(enabled);
		scanPeriodUnit.setEnabled(enabled);
		debugStatusText.setEnabled(enabled);			
	
		
	}
	class UIListener implements OnCheckedChangeListener, OnEditorActionListener, OnItemSelectedListener
	{		
		private void handleUserInput()
		{			
			boolean toggleButtonChecked = toggleButton.isChecked();
			
			
			String scanText = "";
			
			
			ScanSelectionType selectionType = type.getSelectionType();
			if (selectionType == ScanSelectionType.Text)
				scanText = scanPeriodText.getText().toString();
			
			else if (selectionType == ScanSelectionType.Spinner)
			{
				String spinnerChoice = (String)spinner.getSelectedItem();
				System.out.println("selected = " + spinnerChoice);
				
				int frequency;
				if (spinnerChoice.equals(freqChoicesForSensors[0]))
					frequency = android.hardware.SensorManager.SENSOR_DELAY_NORMAL;
				else if (spinnerChoice.equals(freqChoicesForSensors[1]))
					frequency = android.hardware.SensorManager.SENSOR_DELAY_UI; 
				else if (spinnerChoice.equals(freqChoicesForSensors[2]))
					frequency = android.hardware.SensorManager.SENSOR_DELAY_GAME; 
				else if (spinnerChoice.equals(freqChoicesForSensors[3]))
					frequency = android.hardware.SensorManager.SENSOR_DELAY_FASTEST;
				else
					throw new RuntimeException("unknown spinner choice: " + spinnerChoice); 
				
				scanText = frequency + "";				
			}
			
			
			boolean scanTextIsValid;
			
			// check if the input is valid
			if (selectionType == ScanSelectionType.None || selectionType == ScanSelectionType.Spinner)
				scanTextIsValid = true;
			else // textual input, the user has to put in a valid number
			{
				try 
				{ 
					scanTextIsValid = (!(scanText.equals("") || scanText.equals("0")));
					System.out.println("scan text: " + scanText);
					Integer.parseInt(scanText); 
				} 
				catch (NumberFormatException e) { scanTextIsValid = false; System.out.println("is false"); }
			}
						
			if (!scanTextIsValid)			
			{			
				toggleButton.setChecked(false);
				toggleButtonChecked = false;				
				
				Toast.makeText(context, "Please input a valid scan frequency", Toast.LENGTH_SHORT).show();
				return;
			}
								
			try
			{					
				BufferedWriter w = new BufferedWriter(new FileWriter(LifeLogService.RequestFile), 1000);
				if (toggleButtonChecked)
					w.write(type.toString() + LifeLogService.FileDelimiter + "1");
				else
					w.write(type.toString() + LifeLogService.FileDelimiter + "0");
				if (scanText.length() > 0)
					w.write(LifeLogService.FileDelimiter + scanText);
				w.close();
			}
			catch (IOException e) { throw new RuntimeException(e); }

			System.out.println("send change settings");
			client.sendChangeSettingsMsg();
			
			// remove the debusStatusText . yuhan//
			if (type == SensorType.Accl){
				
				sensorLabel.setEnabled(toggleButtonChecked);
				scanPeriodUnit.setEnabled(toggleButtonChecked);
	
			//end	
			}else{

				sensorLabel.setEnabled(toggleButtonChecked);
				scanPeriodUnit.setEnabled(toggleButtonChecked);
				debugStatusText.setEnabled(toggleButtonChecked);		
			}
			
					
		}
		
		@Override
		public void onCheckedChanged(CompoundButton button, boolean b)  { handleUserInput(); }
		
	
		@Override
		public boolean onEditorAction(TextView v, int actionId, KeyEvent event) 
		{
			if (actionId == EditorInfo.IME_ACTION_DONE)
			{
				System.out.println("editor pressed");
				handleUserInput();
			}
			return false;
		}

		@Override
		public void onItemSelected(AdapterView<?> parent, View view, int position, long id) 
		{
			
			
			//Toast.makeText(context, "You are "+parent.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
			System.out.println("spinner selected: " + parent);		
			handleUserInput();
		}

		@Override
		public void onNothingSelected(AdapterView<?> arg0) { }		
	}
}
